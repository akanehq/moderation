generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GuildFeature {
  Appealable
}

/// Guild.id should be unique and the exact same as the guild's ID on Discord.
model Guild {
  id String @id @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User                 User[]
  Appeal               Appeal[]
  Punishments          Punishment[]
  CustomVoice          CustomVoice[]
  ModerationLimitation ModerationLimitation[]

  Quarantine Quarantine?

  features GuildFeature[]

  appealChannelId String?
}

model Appeal {
  id String @id @unique @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String

  User   User   @relation(fields: [userId], references: [id])
  userId String

  Punishment   Punishment @relation(fields: [punishmentId], references: [id])
  punishmentId Int        @unique

  messageId String

  reason   String
  accepted Boolean?
}

/// User.id should be unique and the exact same as the user's ID on Discord.
model User {
  id String @id @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Guilds              Guild[]
  Punishments         Punishment[]
  AuthoredPunishments Punishment[] @relation("AuthoredPunishment")
  Appeal              Appeal[]
}

enum PunishmentKind {
  Ban
  Kick
  Mute
  Warn
}

enum PunishmentStatus {
  Active
  Expired
  Revoked
}

model Punishment {
  id Int @id @unique @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reason      String?
  expiresAt   DateTime?
  attachments String[]

  kind   PunishmentKind
  status PunishmentStatus @default(Active)

  Author   User   @relation(name: "AuthoredPunishment", fields: [authorId], references: [id])
  authorId String

  User   User   @relation(fields: [userId], references: [id])
  userId String

  Appeal Appeal?

  Guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String
}

enum ModerationLimitationKind {
  Any
  Ban
  Kick
  Mute
  Warn
}

model ModerationLimitation {
  id String @id @unique @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String

  kind   ModerationLimitationKind
  roleId String

  amount    Int
  expiresIn Int
}

model Quarantine {
  id String @id @unique @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String @unique

  data   Json
  reason String?
}

model CustomVoice {
  id String @id @unique @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String

  categoryID String @unique
  parentID   String @unique

  template String?
}
